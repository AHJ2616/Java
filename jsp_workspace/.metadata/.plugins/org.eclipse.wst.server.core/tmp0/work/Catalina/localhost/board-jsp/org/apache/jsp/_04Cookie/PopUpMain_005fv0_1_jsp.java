/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-07-24 03:24:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._04Cookie;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class PopUpMain_005fv0_1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");

String popupControl = "on"; //쿠키 제어용
Cookie[] cookies = request.getCookies(); // 모든 쿠키값 불러오기
if(cookies!=null){
	for(Cookie c : cookies){
	String cookieName = c.getName();
	String cookieValue = c.getValue();
	if(cookieName.equals("popUpClose")){
		popupControl = cookieValue; //on | off
	}
	}
}



      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>PopUpMain_v0.1.jsp : 팝업 만들기</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- html(웹의 문서), css3(스타일), javascript(기능구현) -->\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("div#popUp{\r\n");
      out.write("position: absolute; top: 100px;/* 위에서 100픽셀 내려와라 */\r\n");
      out.write("left: 60px; color: black; width: 270px; height: 100px; background-color: gray;\r\n");
      out.write("}\r\n");
      out.write("div#popUp>div{\r\n");
      out.write("position: relative; background-color: #ffffff; border: 2px solid gray; padding: 10px; color : black;\r\n");
      out.write("}\r\n");
      out.write("</style><!-- CSS3를 적용하는 블럭 : 색,크기,도형 -->\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\" integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<!-- 외부에서 제공하는 jQuery라이브러리 CDN -->\r\n");
      out.write("<!-- jQuery : java script를 개선한 코드 -->\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(function() { //jQuery의 기본 프레임\r\n");
      out.write("	$('#closeButton').click(function() { //id가 closeButton인 객체를 클릭했을때 동작\r\n");
      out.write("		$('#popUp').hide(); //div popUp을 숨긴다.\r\n");
      out.write("		var check_value= $(\"input:checkbox[id=inactiveToday]:checked\").val(); //타입이 checkbox인 input에 id가 inactiveToday가 체크되어있는지 확인해서 var에 value값을 넣는다.\r\n");
      out.write("		$.ajax({//비동기 코드 : 현재창을 유지하면서 데이터를 전송해준다.\r\n");
      out.write("			url : './PopupCookie.jsp',\r\n");
      out.write("			type : 'get',\r\n");
      out.write("			data : {inactiveToday:check_value},\r\n");
      out.write("			dataType : \"text\",\r\n");
      out.write("			success : function(resData){\r\n");
      out.write("				if(resData != ''){//''는 null이랑 비슷함\r\n");
      out.write("					location.reload();\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("}); //jQuery 코드 입력\r\n");
      out.write("\r\n");
      out.write("</script> <!-- 자바스크립트 적용하는 블럭 -->\r\n");
      out.write("\r\n");
      out.write("<h2>팝업 메인 페이지</h2>\r\n");
      out.write("\r\n");

out.print("현재 팝업창은"+popupControl+"상태 입니다");
if(popupControl.equals("on")){

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"popUp\">\r\n");
      out.write("<!-- name대신 id를 사용할 수 있다. id는 해당페이지에서 unique값이다. -->\r\n");
      out.write("<!-- class로도 지정가능하다. .Clss명으로 호출 가능하다. -->\r\n");
      out.write("<!-- #id명으로 호출 가능하다. -->\r\n");
      out.write("\r\n");
      out.write("	<h2 align=\"center\">공지사항</h2><!-- 가운데 정렬 -->\r\n");
      out.write("	<p align=\"center\">공지사항을 잘 읽어 주세요</p>\r\n");
      out.write("	<div align=\"right\"><!-- 오른쪽 정령 -->\r\n");
      out.write("	<form name=\"popFrame\">\r\n");
      out.write("	하루동안 열지 않음<input type=\"checkbox\" id=\"inactiveToday\" value=\"1\" /> \r\n");
      out.write("	<input type=\"button\" id= \"closeButton\" value=\"닫기\" />\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
 }/* if코드 종료 */ 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
